//signAlgorithm := signCmd.String("Algorithm", "sha2-256", "SHA2 algorithm to use")
//log.Println("Valid: ", verifyResponse.Data.Valid)
		//os.WriteFile(*signOutputSignature, []byte(signResponse.Data.Signature), 0666)
		//fmt.Printf("File %s correctly signed. Sign is in file %s\n", *verifyInputFile, *verifyInputSignature)
/*
		log.Println(c.Address())

		l, err := c.TransitWithMountPoint("transit").List()
		if err != nil {
			log.Fatal()
		}
		log.Println(l)
	*/
	//const rsa4096 = "rsa-4096"

	//fmt.Println(c.Token())

/*
		err = transit.Create(key, &vault.TransitCreateOptions{
			Exportable: vault.BoolPtr(true),
			Type:       rsa4096,
		})
		if err != nil {
			log.Fatal(err)
		}
	*/

    /*
		res, err := transit.Read(key)
		if err != nil {
			log.Fatal(err)
		} else {
			log.Printf("%+v\n", res.Data)
		}
	*/
	/*
		exportRes, err := transit.Export(key, vault.TransitExportOptions{
			KeyType: "encryption-key",
		})
		if err != nil {
			log.Fatal(err)
		}
		log.Printf("%v+", exportRes.Data.Keys[1])
	*/

	//decryptResponse, err := transit.Decrypt(key, &vault.TransitDecryptOptions{
	//	Ciphertext: encryptResponse.Data.Ciphertext,
	//})
	//if err != nil {
	//	log.Fatalf("Error occurred during decryption: %v", err)
	//}
	//log.Println("Plaintext: ", decryptResponse.Data.Plaintext)
    //key := "test123bacd"
    //log.Println("Signature: ", signResponse.Data.Signature)